body {
    margin: 0;
    padding: 0;
}

#board {
    background-color: black;
    height: 100vh;
    position: relative;
    overflow: hidden;
}

#scores {
    color: rgb(0, 200, 0);
    font-family: sans-serif;
    padding: 0 1%;
    position: absolute;
    margin-left: 25vh;
    margin-top: 15vh;
    border: 2px solid rgb(0, 200, 0)
}
#scores p {
    line-height: 0.5em;
}

.lemming {
    /* base class for event listener */
}

.walk {
    background-color: rgb(0, 200, 0);
    position: absolute;

    /* 
    METHOD 1 to have the image using all the space of the div parent container of the img and keeping aspect ratio
    background-image: url("../images/lemming gifs v1/lemming-walk-anim.gif");
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    */

    /*
    METHOD 3 not ideal... works to fit image in a vertical rectangle, but not in a horizontal rectangle
    */
    /*
    display: flex;
    justify-content: center;
    / * align-items: center; * /
    align-items: flex-end;
    */

    /*
    METHOD 4 ok but won't make the image grow if smaller than container
    */
    /* 
    display: flex;
    justify-content: center;
    align-items: center;
    */

}
.walk img {
    
    /*
    METHOD 0, need to know the greatest dim of the image, works in a vertical rectangle
    */
    /*
    width: 100%;
    height: auto;
    */

    /* 
    METHOD 2 to have the image using all the space of the div parent container of the img and keeping aspect ratio
    https://stackoverflow.com/questions/34247337/object-fit-not-affecting-images/34247563#34247563
    */
    /* 
    width: 100%;
    height: 100%;
    object-fit: contain;
    */
    width: 100%;
    height: auto; 
    object-fit: contain;
    position: absolute;
    bottom: 0px;

    /*
    METHOD 3 not ideal... works to fit image in a vertical rectangle, but not in a horizontal rectangle
    */
    /* flex: 1 0 auto; */
    /* shorthand for flex-grow (flex-shrink (flex-basis)) */

    /*
    METHOD 4 ok but won't make the image grow if smaller than container
    */
    /*
    max-width: 100%;
    max-height: 100%;
    */

}
.walk img.flip {
    transform: scaleX(-1);
    -webkit-transform : scaleX(-1);
    /* to target older Chrome versions and Firefox that are based on WebKit rendering engine (-webkit is a vendor prefix for css properties, used to provide support for features that were experimental or non-standard in specific browsers during the experimental or early stages of implementation) */
    /* buggy, there is 1 pixel offset up... */
}

/* .hardcoded {
    left: 0%;
    / * width: 2%; * /
    / * 
    1080 = 2*2*2*5*27 ; 1/2/2/2/5 = 0.025 ; min precise %
    2% * 1080 = 21.6
    but getBoundingClientRect() returns 21.59375
    and clientWidth returns 22
    and window.getComputedStyle() returns 21.5938px
    (chatGPT says because of browser subpixel rendering...)
    * /

    width: 60vw; 
    height: 40vw;
    background-color: red;
    / * 
    if using a red background color, the bottom of the image (which is white) may seem to go slightly beyond the bottom of the red area, but its a hardware limitation, red lights being higher in a pixel! this cannot be seen use blue or green!
    * /
    position: absolute
} */

.fall {
    background-color: rgb(200, 200, 0);
    position: absolute;
}
.fall img {
    width: 100%;
    height: auto;
    object-fit: contain;
    position: absolute;
    bottom: 0px;
}

.block {
    background-color: rgb(0,0,200);
    position: absolute;
}
.block img {
    width: 100%;
    height: auto;
    object-fit: contain;
    position: absolute;
    bottom: 0px;
}

.bomb {
    background-color: red;
    position: absolute;
}
.bomb img {
    width: 100%;
    height: auto;
    object-fit: contain;
    position: absolute;
    bottom: 0px;
}

.explosion {
    background-color: red;
    position: absolute;
}
.explosion img {
    width: 200%;
    left: -50%;
    height: auto;
    object-fit: contain;
    position: absolute;
    bottom: 0px;
}

.floor {
    background-color: rgb(240, 240, 100);
    position: absolute;
}

.ground {
    background-color: rgb(240, 240, 100);
    position: absolute;
}

.rock {
    background-color: rgb(200, 180, 150);
    position: absolute;
}

#exit {
    position: absolute;
}
#exit img {
    width: 180%;
    left: -40%;
    height: auto;
    object-fit: contain;
    position: absolute;
    bottom: 0px;
}

#hatch {
    top: 10%;
    left: 47.5%; /* aligned with lemmings: Lemming.left - Lemming.width/2 */
    height: 5%;
    width: 5%;

    position: absolute;
}
#hatch img {
    width: 150%;
    left: -25%;
    height: auto;
    object-fit: contain;
    position: absolute;
    bottom: 0px;
}

.field {
    position: absolute;
}

.field#column-left {
    left: 0;
    height: 100vh;
}
.field#column-left img {
    height: 100%;
    object-fit: contain;
}

.field#column-right {
    right: -55vh;
    height: 100vh;
}
.field#column-right img {
    height: 100%;
    object-fit: contain;
}

.field#ornament-top-left {
    top: 0;
    left: 30vh;
    height: 8vh;
}
.field#ornament-top-left img {
    height: 100%;
    object-fit: contain;
}

.field#ornament-top-right {
    top: 0;
    right: 20vh;
    height: 8vh;
}
.field#ornament-top-right img {
    height: 100%;
    object-fit: contain;
}

.field#ground {
    bottom: 0;
    left: 15.5vh;
    width: 112vh;
}
.field#ground img {
    position: absolute;
    bottom: 0;
    width: 100%;
    object-fit: contain;
}

/* place the ground below the ground field part */
/* method 1: place ground above everything else in stacking context (board) */
/*
.field#ground {
    z-index: 1;
}
*/
/* method 2: increase the default stacking order of divs in stack context, except the ground field part */
#board div {
    z-index: 1;
}
#board .ground {
    z-index: 0;
}
/* method 3: z-index: -1; does not work here because it places it behind the board! */

.hardcoded2 {
    left: 20%;
    top: 20%;
    width: 2%;
    height: 2%;
}

.hardcoded2 img {
    width: 100%;
    height: auto;
    object-fit: contain;
    position: absolute;
    bottom: 0px;
}